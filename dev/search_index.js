var documenterSearchIndex = {"docs":
[{"location":"#EasyLD.jl","page":"EasyLD.jl","title":"EasyLD.jl","text":"","category":"section"},{"location":"","page":"EasyLD.jl","title":"EasyLD.jl","text":"This is a Julia package that helps users download and read blocks of LD (linkage disequilibrium) matrices stored as Hail Block Matrix format into memory. This package is inspired by an existing pipeline curated by Aaron Sossin.","category":"page"},{"location":"","page":"EasyLD.jl","title":"EasyLD.jl","text":"We tested this package for processing the following","category":"page"},{"location":"","page":"EasyLD.jl","title":"EasyLD.jl","text":"gnomAD LD matrices\nPan-UKBB LD matrices","category":"page"},{"location":"#Installation","page":"EasyLD.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"EasyLD.jl","title":"EasyLD.jl","text":"This resource uses AWSS3.jl to download files from Amazon servers. Thus, one needs to register an account with AWS first.","category":"page"},{"location":"","page":"EasyLD.jl","title":"EasyLD.jl","text":"To install this package, download Julia. Within Julia, execute the following","category":"page"},{"location":"","page":"EasyLD.jl","title":"EasyLD.jl","text":"using Pkg\npkg\"add https://github.com/biona001/EasyLD.jl\"","category":"page"},{"location":"#Manual-Outline","page":"EasyLD.jl","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"EasyLD.jl","title":"EasyLD.jl","text":"Pages = [\n    \"man/api.md\"\n]\nDepth = 2","category":"page"},{"location":"man/api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Here is a list of available function calls. A detailed description can be found below. ","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"man/api/#Exported-functions","page":"API","title":"Exported functions","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"  download_gnomad_LD_matrices\n  download_ukb_LD_matrices\n  download_gnomad_variant_index_tables\n  download_ukb_variant_index_tables\n  get_gnomad_filenames\n  get_ukb_filenames \n  hail_block_matrix\n  read_variant_index_tables\n  get_block","category":"page"},{"location":"man/api/#EasyLD.download_gnomad_LD_matrices","page":"API","title":"EasyLD.download_gnomad_LD_matrices","text":"download_gnomad_LD_matrices(population::String, outdir::String, [start_from], [num_files])\n\nDownloads the LD matrices from gnomAD panel for specified population and saves result to outdir. See https://gnomad.broadinstitute.org/downloads#v2-linkage-disequilibrium.\n\nInputs\n\npopulation: Options include\nafr for African/African American population\namr for Latino/Admixed American population\nasj for Ashkenazi Jewish population\neas for East Asian population\nfin for European (Finnish) population\nnfe for European (non-Finnish) population\nest for Estonian population\nnwe for North-western European population\nseu for Southern European population\noutdir: Directory for which files will be saved.\nstart_from: Int specifying which file to start downloading at\nnum_files: Int specifying how many files to download\n\nMultiple download sessions at once\n\nSince there are lots of files to download, one can specify the number of files to download by modifying the num_files files option. This function will download the first num_files file counting from the start_from element  of the output of get_gnomad_filenames(). For example, if  myfiles = get_gnomad_filenames(\"afr\"), then the function will download files  from myfiles[start_from] through myfiles[start_from+num_files-1]\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.download_ukb_LD_matrices","page":"API","title":"EasyLD.download_ukb_LD_matrices","text":"download_ukb_LD_matrices(population::String, outdir::String, [start_from], [num_files])\n\nDownloads the LD matrices from pan-UK-biobank for specified population and saves result to outdir. See  https://pan-dev.ukbb.broadinstitute.org/docs/hail-format/index.html.\n\nInputs\n\npopulation: Several options are available. These codes refer only to ancestry    groupings used in GWAS, not necessarily other demographic or self-reported data.\nEUR for European ancestry\nCSA for Central/South Asian ancestry\nAFR for African ancestry\nEAS for East Asian ancestry\nMID for Middle Eastern ancestry\nAMR for Admixed American ancestry\noutdir: Directory for which files will be saved.\nstart_from: Int specifying which file to start downloading at\nnum_files: Int specifying how many files to download\n\nMultiple download sessions at once\n\nSince there are lots of files to download, one can specify the number of files to download by modifying the num_files files option. This function will download the first num_files file counting from the start_from element  of the output of get_ukb_filenames(). For example, if  myfiles = get_ukb_filenames(\"afr\"), then the function will download files  from myfiles[start_from] through myfiles[start_from+num_files-1]\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.download_gnomad_variant_index_tables","page":"API","title":"EasyLD.download_gnomad_variant_index_tables","text":"download_gnomad_variant_index_tables(population::String, outdir::String)\n\nDownloads variant index hail tables from gnomAD panel for specified population  and saves result to outdir. population accepts the same population labels as  download_gnomad_LD_matrices. These files are typically at most a few GB.\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.download_ukb_variant_index_tables","page":"API","title":"EasyLD.download_ukb_variant_index_tables","text":"download_ukb_variant_index_tables(population::String, outdir::String)\n\nDownloads variant index hail tables from pan-UK-biobank for specified population  and saves result to outdir. population accepts the same population labels as  download_ukb_LD_matrices. These files are typically at most a few GB.\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.get_gnomad_filenames","page":"API","title":"EasyLD.get_gnomad_filenames","text":"get_gnomad_filenames(population::String)\n\nReturns a list of file names that would be downloaded for the specified population. This function will not download anything. If join=true, the full path will be returned\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.get_ukb_filenames","page":"API","title":"EasyLD.get_ukb_filenames","text":"get_ukb_filenames(population::String)\n\nReturns a list of file names that would be downloaded for the specified population. This function will not download anything. If join=true, the full path will be returned\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.hail_block_matrix","page":"API","title":"EasyLD.hail_block_matrix","text":"hail_block_matrix(bm_files::String, ht_files::String)\n\nCreates a HailBlockMatrix which allows reading chunks of LD matrix data into  memory. It is a subtype of AbstractMatrix, so operations like indexing and  size() works, but only accessing its elements in contiguous chunks is \"fast\".  I may support more functionalities depending on interest. \n\nExamples\n\nusing EasyLD\ndatadir = \"/Users/biona001/.julia/dev/EasyLD/data\"\nbm_file = joinpath(datadir, \"UKBB.EUR.ldadj.bm\")\nht_file = joinpath(datadir, \"UKBB.EUR.ldadj.variant.ht\")\nbm = hail_block_matrix(bm_file, ht_file); # need a ';' to avoid displaying a few entries of bm, which takes ~0.1 seconds per entry\n\n# get matrix dimension\nsize(bm) # returns (23960350, 23960350)\n\n# read a single entry\nbm[1, 1] # returns 0.999959841549239\n\n# read first 10k by 10k block into memory (takes roughly 7 seconds)\nbm[1:10000, 1:10000]\n\n# arbitrary slicing works but is very slow\nbm[1:3, 1:2:100] # ~22 seconds\n\n# read a specific chromosome region\nchr = 1\nstart_pos = 11063\nend_pos = 91588\nsigma = get_block(bm, chr, start_pos, end_pos)\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.read_variant_index_tables","page":"API","title":"EasyLD.read_variant_index_tables","text":"read_variant_index_tables(ht_file::String)\n\nRead variant index hail tables into a DataFrame. The first time this function gets called, we will read the original .ht files into memory and write the result to a tab-separated value .tsv file into the same directory as ht_file,  and we will also create a comma separated file ending in .csv which pre-process the .tsv file for easier reading. \n\nNote\n\nrsIDs: Some panels (e.g. Pan-UKB) also contain rsID, but others (e.g. gnomAD) does not,   so rsID may not be available. \nAF: Alternate Allele frequency is sometimes available in the .tsv file in   its own column (e.g. Pan-UKB), but other times it's hidden inside a column    of the .tsv file (e.g. in gnomAD it is under the header pop_freq which   includes AF but also other information). In the later case, we will assume   the column in .tsv has header name alt_allele_header and is JSON   formatted, and further that alt-allele freq is available as AF key. See   _extract_alternate_allele_freq\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.get_block","page":"API","title":"EasyLD.get_block","text":"get_block(bm::HailBlockMatrix, chr, start_bp, end_bp)\n\nReads in a block of LD matrix from chromosome chr between basepairs  start_bp and end_bp. The inputs chr, start_bp, end_bp can be Int or String. The result will always be a matrix even if start_bp == end_bp.\n\nIf start_bp or end_bp is not in the LD matrix, we will return the smallest region that does NOT include them. For example, if  (start_bp, end_bp) = (555, 777) and SNP positions in the LD panel are  bm.pos    = [..., 400,  500,  600,  700,  800,  900, ...] snp_names = [..., snp4, snp5, snp6, snp7, snp8, snp9, ..] then we will return the LD matrix for [snp6, snp7]\n\nNote\n\nMake sure start_bp and end_bp is from the same human genome build as the  LD matrices. Pan-UKBB and genomAD both use hg38.\n\n\n\n\n\n","category":"function"},{"location":"man/api/#Internal-helpder-functions","page":"API","title":"Internal helpder functions","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"  _extract_alternate_allele_freq\n  _extract_ref_alt_alleles\n  _extract_genome_build\n  _read_metadata","category":"page"}]
}
