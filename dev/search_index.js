var documenterSearchIndex = {"docs":
[{"location":"man/pan_UKB/#Pan-UKB-data","page":"Pan UKBB","title":"Pan-UKB data","text":"","category":"section"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"Link: https://pan-dev.ukbb.broadinstitute.org/docs/hail-format/index.html#extracting-a-subset-of-ld-matrix\nEuropean samples are the largest, totaling 14.1T of data","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"using EasyLD\nusing CSV\nusing DataFrames\nusing Statistics\nusing LinearAlgebra","category":"page"},{"location":"man/pan_UKB/#Downloading","page":"Pan UKBB","title":"Downloading","text":"","category":"section"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"First check how many files there are:","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"get_ukb_filenames(\"EUR\", join=false)","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"124281-element Vector{String}:\n \"part-000000-44-0-0-22f828c8-17c3-7c3c-1fa1-1fc113144aca\"\n \"part-000001-44-1-0-d35bc353-c9b7-28e7-315b-f1bcd8d9e50b\"\n \"part-000002-44-2-2-7dc4e8fd-75f7-26d0-4b9c-65628f25cf34\"\n \"part-000003-44-3-0-74be7ee3-ba85-f9ce-4add-9638cf387f8a\"\n \"part-000004-44-4-0-b11cbd6a-50e2-4e5e-ae70-932ff3aebd5f\"\n \"part-000005-44-5-0-104f3537-b7e4-0959-555b-7e65ca2b00ae\"\n \"part-000006-44-6-0-f99bebaa-7361-9c3e-65a0-2700858c2b28\"\n \"part-000007-44-7-0-90293a19-7ae6-f6a6-1141-48f62ee6f8b1\"\n \"part-000008-44-8-0-847d7052-f784-0c5f-c4f8-d16df8745a23\"\n \"part-000009-44-9-0-2b61d351-aeda-4c03-52aa-cb380599219d\"\n \"part-000010-44-10-0-90b9d808-fa98-2727-ca3e-d63676464185\"\n \"part-000011-44-11-0-7a15dbc9-b5c7-3500-8258-886bbf569e35\"\n \"part-000012-44-12-0-73b49602-7c17-3f3b-860c-6aaa8b25f36b\"\n ⋮\n \"part-124226-44-124226-0-9948291d-f1c5-775a-4ed3-7d75c9e7d007\"\n \"part-124227-44-124227-0-43ffd695-b0c7-577e-0d5a-8ea5f3ed84d0\"\n \"part-124228-44-124228-0-d22a4e30-04f2-82aa-dfd2-4d3ae95e57b4\"\n \"part-124229-44-124229-0-12730aef-d105-61a3-5342-f20ed3bf3645\"\n \"part-124230-44-124230-0-984e649b-fc68-5397-3b47-52b76e87c2c6\"\n \"part-124231-44-124231-0-9fd5803f-f5c7-1c4c-a5fa-77b76dc1f52d\"\n \"part-124232-44-124232-0-b891bf57-4536-661b-d679-10aac2532957\"\n \"part-124233-44-124233-0-1c6f8f3f-9337-fc25-53ef-63e76c5a37cf\"\n \"part-124234-44-124234-0-ad9c21cc-9c7c-0ccb-9335-921cc35ae152\"\n \"part-124235-44-124235-0-0f31fad5-1ba4-79b3-dff0-cb17d6b694ed\"\n \"part-124236-44-124236-0-98383aba-a5c1-8093-c27f-001aae4730d3\"\n \"part-124237-44-124237-1-36053042-3e3b-0495-e362-d7e756ac8f5a\"","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"Try downloading the first 10 files (~1GB)","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"population = \"EUR\"\noutdir = \"/Users/biona001/.julia/dev/EasyLD/data\"\ndownload_ukb_LD_matrices(population, outdir, start_from=1, num_files=10)","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"\u001b[32mProgress: 100%|█████████████████████████████████████████| Time: 0:00:49\u001b[39m","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"The result would be saved into outdir directory with name UKBB.EUR.ldadj.bm which itself is a directory.\nFor multithreaded downloads, one can use start_from and num_files keywords to control how many matrices to download (not specifying will download all matrices). A progress meter is automatically displayed.","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"Finally, download variant index hail table","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"population = \"EUR\"\noutdir = \"/Users/biona001/.julia/dev/EasyLD/data\"\ndownload_ukb_variant_index_tables(population, outdir)","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"The result will be stored as UKBB.$population.ldadj.variant.ht in outdir","category":"page"},{"location":"man/pan_UKB/#Reading-LD-panel-with-Matrix-interface","page":"Pan UKBB","title":"Reading LD panel with Matrix interface","text":"","category":"section"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"The first time hail_block_matrix gets called, we do some pre-processing to the variant index files so subsequent calls will be faster. ","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"bm_file = \"/Users/biona001/.julia/dev/EasyLD/data/UKBB.EUR.ldadj.bm\"\nht_file = \"/Users/biona001/.julia/dev/EasyLD/data/UKBB.EUR.ldadj.variant.ht\"\n@time bm = hail_block_matrix(bm_file, ht_file); # the ';' avoids displaying a few entries of bm, which takes ~0.1 seconds per entry","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"130.413312 seconds (978.68 M allocations: 23.643 GiB, 50.65% gc time, 4.97% compilation time)","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"Check size of matrix","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"size(bm)","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"(23960350, 23960350)","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"Read first 10000 by 10000 block into memory","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"Sigma = bm[1:10000, 1:10000]","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"[Stage 1:=================================================>         (5 + 1) / 6]\r\n\n\n\n\n10000×10000 Matrix{Float64}:\n 0.99996  0.00098559  -0.000830543  …  -0.000520665   0.00422904\n 0.0      0.999942    -0.00104453      -0.00494589    0.00050959\n 0.0      0.0          0.999963        -0.00129536    0.00216722\n 0.0      0.0          0.0             -0.00663755    0.000142521\n 0.0      0.0          0.0              0.0104731     0.000936687\n 0.0      0.0          0.0          …  -0.00202249   -0.000497824\n 0.0      0.0          0.0             -0.00550819    0.00283421\n 0.0      0.0          0.0             -0.00145102   -0.000761935\n 0.0      0.0          0.0              0.00287458   -0.0010154\n 0.0      0.0          0.0             -0.000450895  -0.00130722\n 0.0      0.0          0.0          …  -0.00101125    0.000451512\n 0.0      0.0          0.0              0.00590455   -0.00110266\n 0.0      0.0          0.0             -0.00274252   -0.000817142\n ⋮                                  ⋱                \n 0.0      0.0          0.0             -0.109458     -0.00866031\n 0.0      0.0          0.0              0.0158602     0.0203563\n 0.0      0.0          0.0          …   0.00745596    0.0184919\n 0.0      0.0          0.0              0.983906     -0.0122066\n 0.0      0.0          0.0              0.0155851     0.0197608\n 0.0      0.0          0.0              0.965104     -0.0159355\n 0.0      0.0          0.0             -0.129534      0.088277\n 0.0      0.0          0.0          …   0.622303      0.059004\n 0.0      0.0          0.0              0.965347     -0.0160028\n 0.0      0.0          0.0              0.0925609     0.999286\n 0.0      0.0          0.0              0.999972      0.0926374\n 0.0      0.0          0.0              0.0           0.999974","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"Check if the given block is PSD by computing its eigenvalues","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"eigvals(Symmetric(Sigma)) # Symmetric uses upper triangular portion of data","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"10000-element Vector{Float64}:\n  -4.496303144059796e-15\n  -1.762987426134658e-15\n  -1.040030990442209e-15\n  -4.2089306816541705e-16\n  -3.960324780237165e-16\n  -3.9060196040323796e-16\n  -2.985734642577166e-16\n  -2.8601497287222336e-16\n  -2.5553650845256305e-16\n  -1.998130772222011e-16\n  -1.8449274904356797e-16\n  -1.7028015609869147e-16\n  -1.3192630645503314e-16\n   ⋮\n 116.57001725005479\n 124.37732317876345\n 125.11477060743002\n 135.80425399688727\n 142.93300594996916\n 149.24000792252738\n 161.47927858350278\n 181.82233513932786\n 228.3300216753156\n 235.961635959381\n 280.6540947869515\n 322.07381500507836","category":"page"},{"location":"man/pan_UKB/#Read-in-a-block-with-get_block","page":"Pan UKBB","title":"Read in a block with get_block","text":"","category":"section"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"One can also extract a block by specifying the chromosome and starting/ending basepair","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"chr = 1\nstart_pos = 11063\nend_pos = 91588\nsigma, df = get_block(bm, chr, start_pos, end_pos; min_maf=0.0)\nsigma","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"9×9 Matrix{Float64}:\n 0.99996  0.00098559  -0.000830543  …  -0.00045888    0.000221516\n 0.0      0.999942    -0.00104453      -0.000332668  -0.000439517\n 0.0      0.0          0.999963        -0.000551892  -0.000786793\n 0.0      0.0          0.0             -0.000503539  -0.000712834\n 0.0      0.0          0.0             -0.000294435   0.00575015\n 0.0      0.0          0.0          …  -0.000112519  -0.00015419\n 0.0      0.0          0.0             -0.000264108   0.00413586\n 0.0      0.0          0.0              0.999978     -0.000225057\n 0.0      0.0          0.0              0.0           0.99995","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"# SNP information of this block\n@show df;","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"df = 9×6 DataFrame\n Row │ rsid         AF          chr      pos    ref     alt\n     │ String       Float64     String3  Int64  String  String\n─────┼─────────────────────────────────────────────────────────\n   1 │ rs561109771  4.7982e-5   1        11063  T       G\n   2 │ rs562993331  0.00027798  1        13259  G       A\n   3 │ rs578081284  0.00083096  1        17641  G       A\n   4 │ rs576081345  0.00065859  1        57222  T       C\n   5 │ rs570371753  0.00024023  1        58396  T       C\n   6 │ rs561430336  2.7728e-5   1        63668  G       A\n   7 │ rs2531267    0.00018542  1        69569  T       C\n   8 │ rs557418932  8.1599e-5   1        79192  T       G\n   9 │ rs554639997  0.00015868  1        91588  G       A","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"When importing blocks, one can filter for minimum minor allele frequency","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"# keep SNPs with MAF > 0.0001\nchr = 1\nstart_pos = 11063\nend_pos = 91588\nsigma, df = get_block(bm, chr, start_pos, end_pos; min_maf=0.0001)\nsigma","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"6×6 Matrix{Float64}:\n 0.999942  -0.00104453  -0.000939341  …  -0.000502128  -0.000439517\n 0.0        0.999963    -0.00164293      -0.000874333  -0.000786793\n 0.0        0.0          0.999972        -0.00079952   -0.000712834\n 0.0        0.0          0.0             -0.00044672    0.00575015\n 0.0        0.0          0.0              0.999986      0.00413586\n 0.0        0.0          0.0          …   0.0           0.99995","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"@show df;","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"df = 6×6 DataFrame\n Row │ rsid         AF          chr      pos    ref     alt\n     │ String       Float64     String3  Int64  String  String\n─────┼─────────────────────────────────────────────────────────\n   1 │ rs562993331  0.00027798  1        13259  G       A\n   2 │ rs578081284  0.00083096  1        17641  G       A\n   3 │ rs576081345  0.00065859  1        57222  T       C\n   4 │ rs570371753  0.00024023  1        58396  T       C\n   5 │ rs2531267    0.00018542  1        69569  T       C\n   6 │ rs554639997  0.00015868  1        91588  G       A","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"One can also provide a list of SNP positions, and we will only keep SNPs that have those position which also pass the min_maf filter","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"# keep SNPs with MAF > 0.0001 and only include a list of SNPs with known positions\nchr = 1\nstart_pos = 11063\nend_pos = 91588\nsnps_to_keep = [13259, 58396, 91588]\nsigma, df = get_block(bm, chr, start_pos, end_pos; min_maf=0.0001, snps_to_keep=snps_to_keep)\nsigma","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"[Stage 2:>                                                          (0 + 1) / 1]\r\n\n\n\n\n3×3 Matrix{Float64}:\n 0.999942  -0.00056507  -0.000439517\n 0.0        0.999982     0.00575015\n 0.0        0.0          0.99995","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"@show df;","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"df = 3×6 DataFrame\n Row │ rsid         AF          chr      pos    ref     alt\n     │ String       Float64     String3  Int64  String  String\n─────┼─────────────────────────────────────────────────────────\n   1 │ rs562993331  0.00027798  1        13259  G       A\n   2 │ rs570371753  0.00024023  1        58396  T       C\n   3 │ rs554639997  0.00015868  1        91588  G       A","category":"page"},{"location":"man/pan_UKB/#SNP-information","page":"Pan UKBB","title":"SNP information","text":"","category":"section"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"SNP information can be accessed from the bm.info field, where AF corresponds to alternate allele frequency. ","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"@show bm.info[1:10, :]; # first 10 rows","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"bm.info[1:10, :] = 10×6 DataFrame\n Row │ rsid         AF          chr      pos     ref     alt\n     │ String       Float64     String3  Int64   String  String\n─────┼──────────────────────────────────────────────────────────\n   1 │ rs561109771  4.7982e-5   1         11063  T       G\n   2 │ rs562993331  0.00027798  1         13259  G       A\n   3 │ rs578081284  0.00083096  1         17641  G       A\n   4 │ rs576081345  0.00065859  1         57222  T       C\n   5 │ rs570371753  0.00024023  1         58396  T       C\n   6 │ rs561430336  2.7728e-5   1         63668  G       A\n   7 │ rs2531267    0.00018542  1         69569  T       C\n   8 │ rs557418932  8.1599e-5   1         79192  T       G\n   9 │ rs554639997  0.00015868  1         91588  G       A\n  10 │ rs575442534  0.00066441  1        533573  G       A","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"Alternatively, one can read SNP information by giving the variant index folder","category":"page"},{"location":"man/pan_UKB/","page":"Pan UKBB","title":"Pan UKBB","text":"df = read_variant_index_tables(ht_file)","category":"page"},{"location":"man/gnomAD/#gnomAD-data","page":"gnomAD","title":"gnomAD data","text":"","category":"section"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"Link: https://gnomad.broadinstitute.org/downloads#v2-linkage-disequilibrium\nnfe population totals ~555GB","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"using Revise\nusing EasyLD\nusing CSV\nusing DataFrames\nusing Statistics\nusing LinearAlgebra","category":"page"},{"location":"man/gnomAD/#Downloading","page":"gnomAD","title":"Downloading","text":"","category":"section"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"First check how many files there are:","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"get_gnomad_filenames(\"nfe\", join=false)","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"10023-element Vector{String}:\n \"part-00000-14-0-0-7e282c91-9060-db76-1d4a-a02877b62910\"\n \"part-00001-14-1-0-2bb43364-b9d9-7048-c4e0-74c951357d81\"\n \"part-00002-14-2-0-998bf016-ab2f-aaf9-ce80-7888e4ee7524\"\n \"part-00003-14-3-0-5ad64a0b-ecb1-cf91-69ab-e3ee2fcdef51\"\n \"part-00004-14-4-0-7a03381b-dc38-5f21-f8dd-ad869dd1f340\"\n \"part-00005-14-5-0-d78f2159-d71c-adc2-47eb-5af6a6c34015\"\n \"part-00006-14-6-0-dc8b5638-9246-15b8-579e-d14ff6a69646\"\n \"part-00007-14-7-0-f41e5872-2ed6-36d2-e625-bb6d6261c6bc\"\n \"part-00008-14-8-0-27a9b5b4-b329-d7a8-9d86-f3184776cb09\"\n \"part-00009-14-9-0-68655a89-424f-0cb7-b35c-583b52c859e3\"\n \"part-00010-14-10-0-a60938ee-75ec-91c9-91f3-fbcffa73a20e\"\n \"part-00011-14-11-0-3be840ef-ae93-3775-47fe-fc33eedb9911\"\n \"part-00012-14-12-0-8cbce5b3-023a-b252-52c2-cc9c717d0ec5\"\n ⋮\n \"part-10011-14-10011-0-1ed25fc8-64a3-7084-60be-717f4c447fac\"\n \"part-10012-14-10012-0-342cfc1b-d185-4c2d-ad6e-d9595c5b9071\"\n \"part-10013-14-10013-0-004a90a8-ec7c-0664-d592-47686c3df576\"\n \"part-10014-14-10014-0-fdad432a-59ea-ef55-aa6c-dfebf128272c\"\n \"part-10015-14-10015-0-5216889b-97ba-8e71-8d77-27c2e41a7a38\"\n \"part-10016-14-10016-0-955e1d70-ef0f-5dc7-cf3f-55c2d7626c53\"\n \"part-10017-14-10017-0-14ea97f3-00af-93ba-ffa7-f6a0ff9c6541\"\n \"part-10018-14-10018-0-2cc71e56-18a8-de9e-85c8-1513ec63cceb\"\n \"part-10019-14-10019-0-16de6180-8034-d811-4875-a91b2da0dad8\"\n \"part-10020-14-10020-0-1a65d50c-ffe5-2f10-c510-60e0cfa5b186\"\n \"part-10021-14-10021-0-fc83fd8d-e05e-6955-fc58-bcf4296985ba\"\n \"part-10022-14-10022-0-216231b4-e554-eac9-d165-ffa8a90fef05\"","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"population = \"nfe\"\noutdir = \"/Users/biona001/.julia/dev/EasyLD/data\"\ndownload_gnomad_LD_matrices(population, outdir, start_from=1, num_files=10)","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"\u001b[32mProgress: 100%|█████████████████████████████████████████| Time: 0:00:29\u001b[39m","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"The result would be saved into outdir directory with name gnomad.genomes.r2.1.1.nfe.common.adj.ld.bm which itself is a directory.\nFor multithreaded downloads, one can use start_from and num_files keywords to control how many matrices to download (not specifying will download all matrices). A progress meter is automatically displayed.","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"One also needs the variant index files which tells us chr/pos/ref/alt/SNP-name/alt-allele-frequency","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"population = \"nfe\"\noutdir = \"/Users/biona001/.julia/dev/EasyLD/data\"\n@time download_gnomad_variant_index_tables(population, outdir)","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"The result will be stored as gnomad.genomes.r2.1.1.$population.common.adj.ld.variant_indices.ht in outdir","category":"page"},{"location":"man/gnomAD/#Reading-LD-panel-with-Matrix-interface","page":"gnomAD","title":"Reading LD panel with Matrix interface","text":"","category":"section"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"The first time hail_block_matrix gets called, we do some pre-processing to the variant index files so subsequent calls will be faster. ","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"bm_file = \"/Users/biona001/.julia/dev/EasyLD/data/gnomad.genomes.r2.1.1.nfe.common.adj.ld.bm\"\nht_file = \"/Users/biona001/.julia/dev/EasyLD/data/gnomad.genomes.r2.1.1.nfe.common.adj.ld.variant_indices.ht\"\n@time bm = hail_block_matrix(bm_file, ht_file); # the ';' avoids displaying a few entries of bm, which takes ~0.1 seconds per entry","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":" 33.650270 seconds (477.52 M allocations: 10.556 GiB, 12.67% gc time, 18.13% compilation time)","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"Check size of matrix","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"size(bm)","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"(14207204, 14207204)","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"Read first 10000 by 10000 block into memory","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"Sigma = bm[1:10000, 1:10000]","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"[Stage 0:=================================================>         (5 + 1) / 6]\r\n\n\n\n\n10000×10000 Matrix{Float64}:\n 1.0  0.0326361  -0.0181891   …   0.0         0.0         0.0\n 0.0  1.0        -0.00041394      0.0         0.0         0.0\n 0.0  0.0         1.0             0.0         0.0         0.0\n 0.0  0.0         0.0             0.0         0.0         0.0\n 0.0  0.0         0.0             0.0         0.0         0.0\n 0.0  0.0         0.0         …   0.0         0.0         0.0\n 0.0  0.0         0.0             0.0         0.0         0.0\n 0.0  0.0         0.0             0.0         0.0         0.0\n 0.0  0.0         0.0             0.0         0.0         0.0\n 0.0  0.0         0.0             0.0         0.0         0.0\n 0.0  0.0         0.0         …   0.0         0.0         0.0\n 0.0  0.0         0.0             0.0         0.0         0.0\n 0.0  0.0         0.0             0.0         0.0         0.0\n ⋮                            ⋱                          \n 0.0  0.0         0.0             0.368793    0.36933    -0.0120351\n 0.0  0.0         0.0             0.789835    0.10943     0.0197234\n 0.0  0.0         0.0         …  -0.167317    0.206943    0.0121849\n 0.0  0.0         0.0            -0.146398    0.193441   -0.0275316\n 0.0  0.0         0.0            -0.0631539   0.0803796   0.0113878\n 0.0  0.0         0.0            -0.0397994   0.0521778  -0.00356272\n 0.0  0.0         0.0            -0.0309998   0.0109042  -0.00833901\n 0.0  0.0         0.0         …  -0.112318   -0.285862   -0.0291041\n 0.0  0.0         0.0            -0.152088    0.362752   -0.0176148\n 0.0  0.0         0.0             1.0         0.22565     0.0399238\n 0.0  0.0         0.0             0.0         1.0        -0.0670657\n 0.0  0.0         0.0             0.0         0.0         1.0","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"Check if the given block is PSD by computing its eigenvalues","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"eigvals(Symmetric(Sigma)) # Symmetric uses upper triangular portion of data","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"10000-element Vector{Float64}:\n  -2.5798836838860755\n  -1.415006812481892\n  -0.7674440501660297\n  -0.6247787622218666\n  -0.584928280772804\n  -0.5435038109298787\n  -0.5187701863140765\n  -0.43166908059139875\n  -0.41532154277852423\n  -0.38813217585569226\n  -0.3700017799653646\n  -0.35667047980202393\n  -0.3485121536359235\n   ⋮\n 109.56227091251577\n 113.33023962897241\n 127.38408283290424\n 130.99148352578467\n 132.82965433833886\n 145.9473736360883\n 155.27371456569082\n 177.7213297373829\n 194.1048422669041\n 231.15057521884452\n 293.44132970720796\n 317.6410079580756","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"Arbitrary slicing works but is very slow","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"@time bm[1:3, 1:2:100] # read columns 1, 3, 5, ...","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":" 30.278933 seconds (759 allocations: 13.219 KiB)\n\n\n\n\n\n3×50 Matrix{Float64}:\n 1.0  -0.0181891   0.00802797  -0.0421512  …  0.0143534     0.0172358\n 0.0  -0.00041394  0.00232164  -0.0112066     5.39059e-5   -0.0188801\n 0.0   1.0         0.0         -0.0282011     0.000733417  -0.0277042","category":"page"},{"location":"man/gnomAD/#Read-in-a-block-with-get_block","page":"gnomAD","title":"Read in a block with get_block","text":"","category":"section"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"One can also extract a block by specifying the chromosome and starting/ending basepair","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"chr = 1\nstart_pos = 57292\nend_pos = 59193\nsigma, df = get_block(bm, chr, start_pos, end_pos; min_maf=0.0)\nsigma","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"8×8 Matrix{Float64}:\n 1.0  0.0135236  -0.0249515  -0.0617588  …  -0.00321314  -0.00718484\n 0.0  1.0         0.0167518   0.0209895      0.00877351   0.012266\n 0.0  0.0         1.0        -0.0125702     -0.0074448   -0.0373812\n 0.0  0.0         0.0         1.0            0.0120626   -0.0486212\n 0.0  0.0         0.0         0.0           -0.0186309   -0.0454317\n 0.0  0.0         0.0         0.0        …   0.900573     0.00806292\n 0.0  0.0         0.0         0.0            1.0          0.00246611\n 0.0  0.0         0.0         0.0            0.0          1.0","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"# SNP information of this block\n@show df;","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"df = 8×5 DataFrame\n Row │ AF         chr      pos    ref     alt\n     │ Float64    String3  Int64  String  String\n─────┼───────────────────────────────────────────\n   1 │ 0.0259568  1        57292  C       T\n   2 │ 0.992971   1        57952  A       C\n   3 │ 0.0586652  1        58176  G       A\n   4 │ 0.36321    1        58866  C       G\n   5 │ 0.0921872  1        59040  T       C\n   6 │ 0.010808   1        59108  G       A\n   7 │ 0.0112479  1        59121  G       T\n   8 │ 0.0370268  1        59193  T       G","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"When importing blocks, one can filter for minimum minor allele frequency","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"# keep SNPs with MAF > 0.05\nchr = 1\nstart_pos = 57292\nend_pos = 59193\nsigma, df = get_block(bm, chr, start_pos, end_pos; min_maf=0.05)\nsigma","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"3×3 Matrix{Float64}:\n 1.0  -0.0125702  -0.0323548\n 0.0   1.0        -0.0178985\n 0.0   0.0         1.0","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"@show df;","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"df = 3×5 DataFrame\n Row │ AF         chr      pos    ref     alt\n     │ Float64    String3  Int64  String  String\n─────┼───────────────────────────────────────────\n   1 │ 0.0586652  1        58176  G       A\n   2 │ 0.36321    1        58866  C       G\n   3 │ 0.0921872  1        59040  T       C","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"One can also provide a list of SNP positions, and we will only keep SNPs that have those position which also pass the min_maf filter","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"# keep SNPs with MAF > 0.05 and only include a list of SNPs with known positions\nchr = 1\nstart_pos = 57292\nend_pos = 59193\nsnps_to_keep = [58176, 58866]\nsigma, df = get_block(bm, chr, start_pos, end_pos; min_maf=0.05, snps_to_keep=snps_to_keep)\nsigma","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"2×2 Matrix{Float64}:\n 1.0  -0.0125702\n 0.0   1.0","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"@show df;","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"df = 2×5 DataFrame\n Row │ AF         chr      pos    ref     alt\n     │ Float64    String3  Int64  String  String\n─────┼───────────────────────────────────────────\n   1 │ 0.0586652  1        58176  G       A\n   2 │ 0.36321    1        58866  C       G","category":"page"},{"location":"man/gnomAD/#SNP-information","page":"gnomAD","title":"SNP information","text":"","category":"section"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"The HailBlockMatrix struct contains the SNP information for each row/column of the LD matrix. ","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"@show bm.info[1:10, :]; # print first 10 columns","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"bm.info[1:10, :] = 10×5 DataFrame\n Row │ AF          chr      pos    ref     alt\n     │ Float64     String3  Int64  String  String\n─────┼────────────────────────────────────────────\n   1 │ 0.409221    1        10146  AC      A\n   2 │ 0.00810811  1        10151  TA      T\n   3 │ 0.144444    1        10177  A       C\n   4 │ 0.0232558   1        10178  CCTAA   C\n   5 │ 0.00617284  1        10181  A       T\n   6 │ 0.0326087   1        10250  A       C\n   7 │ 0.0595238   1        10257  A       C\n   8 │ 0.198276    1        10327  T       C\n   9 │ 0.05        1        10329  AC      A\n  10 │ 0.00720461  1        10333  CT      C","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"Alternatively, one can import this dataframe directly with the following syntax","category":"page"},{"location":"man/gnomAD/","page":"gnomAD","title":"gnomAD","text":"df = read_variant_index_tables(ht_file)","category":"page"},{"location":"#EasyLD.jl","page":"EasyLD.jl","title":"EasyLD.jl","text":"","category":"section"},{"location":"","page":"EasyLD.jl","title":"EasyLD.jl","text":"This is a Julia package that helps users download and read blocks of LD (linkage disequilibrium) matrices stored as Hail Block Matrix format into memory. This package is inspired by an existing pipeline curated by Aaron Sossin.","category":"page"},{"location":"","page":"EasyLD.jl","title":"EasyLD.jl","text":"We tested this package for processing the following","category":"page"},{"location":"","page":"EasyLD.jl","title":"EasyLD.jl","text":"gnomAD LD matrices\nPan-UKBB LD matrices","category":"page"},{"location":"#Installation","page":"EasyLD.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"EasyLD.jl","title":"EasyLD.jl","text":"This resource uses AWSS3.jl to download files from Amazon servers. Thus, one needs to register an account with AWS first.","category":"page"},{"location":"","page":"EasyLD.jl","title":"EasyLD.jl","text":"To install this package, download Julia. Within Julia, execute the following","category":"page"},{"location":"","page":"EasyLD.jl","title":"EasyLD.jl","text":"using Pkg\npkg\"add https://github.com/biona001/EasyLD.jl\"","category":"page"},{"location":"#Manual-Outline","page":"EasyLD.jl","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"EasyLD.jl","title":"EasyLD.jl","text":"Pages = [\n    \"man/api.md\"\n    \"man/pan_UKB.md\"\n    \"man/gnomAD.md\"\n]\nDepth = 2","category":"page"},{"location":"man/api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Here is a list of available function calls. A detailed description can be found below. ","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"man/api/#Exported-functions","page":"API","title":"Exported functions","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"  download_gnomad_LD_matrices\n  download_ukb_LD_matrices\n  download_gnomad_variant_index_tables\n  download_ukb_variant_index_tables\n  get_gnomad_filenames\n  get_ukb_filenames \n  hail_block_matrix\n  read_variant_index_tables\n  get_block","category":"page"},{"location":"man/api/#EasyLD.download_gnomad_LD_matrices","page":"API","title":"EasyLD.download_gnomad_LD_matrices","text":"download_gnomad_LD_matrices(population::String, outdir::String, [start_from], [num_files])\n\nDownloads the LD matrices from gnomAD panel for specified population and saves result to outdir. See https://gnomad.broadinstitute.org/downloads#v2-linkage-disequilibrium.\n\nInputs\n\npopulation: Options include\nafr for African/African American population\namr for Latino/Admixed American population\nasj for Ashkenazi Jewish population\neas for East Asian population\nfin for European (Finnish) population\nnfe for European (non-Finnish) population\nest for Estonian population\nnwe for North-western European population\nseu for Southern European population\noutdir: Directory for which files will be saved.\nstart_from: Int specifying which file to start downloading at\nnum_files: Int specifying how many files to download\n\nMultiple download sessions at once\n\nSince there are lots of files to download, one can specify the number of files to download by modifying the num_files files option. This function will download the first num_files file counting from the start_from element  of the output of get_gnomad_filenames(). For example, if  myfiles = get_gnomad_filenames(\"afr\"), then the function will download files  from myfiles[start_from] through myfiles[start_from+num_files-1]\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.download_ukb_LD_matrices","page":"API","title":"EasyLD.download_ukb_LD_matrices","text":"download_ukb_LD_matrices(population::String, outdir::String, [start_from], [num_files])\n\nDownloads the LD matrices from pan-UK-biobank for specified population and saves result to outdir. See  https://pan-dev.ukbb.broadinstitute.org/docs/hail-format/index.html.\n\nInputs\n\npopulation: Several options are available. These codes refer only to ancestry    groupings used in GWAS, not necessarily other demographic or self-reported data.\nEUR for European ancestry\nCSA for Central/South Asian ancestry\nAFR for African ancestry\nEAS for East Asian ancestry\nMID for Middle Eastern ancestry\nAMR for Admixed American ancestry\noutdir: Directory for which files will be saved.\nstart_from: Int specifying which file to start downloading at\nnum_files: Int specifying how many files to download\n\nMultiple download sessions at once\n\nSince there are lots of files to download, one can specify the number of files to download by modifying the num_files files option. This function will download the first num_files file counting from the start_from element  of the output of get_ukb_filenames(). For example, if  myfiles = get_ukb_filenames(\"afr\"), then the function will download files  from myfiles[start_from] through myfiles[start_from+num_files-1]\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.download_gnomad_variant_index_tables","page":"API","title":"EasyLD.download_gnomad_variant_index_tables","text":"download_gnomad_variant_index_tables(population::String, outdir::String)\n\nDownloads variant index hail tables from gnomAD panel for specified population  and saves result to outdir. population accepts the same population labels as  download_gnomad_LD_matrices. These files are typically at most a few GB.\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.download_ukb_variant_index_tables","page":"API","title":"EasyLD.download_ukb_variant_index_tables","text":"download_ukb_variant_index_tables(population::String, outdir::String)\n\nDownloads variant index hail tables from pan-UK-biobank for specified population  and saves result to outdir. population accepts the same population labels as  download_ukb_LD_matrices. These files are typically at most a few GB.\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.get_gnomad_filenames","page":"API","title":"EasyLD.get_gnomad_filenames","text":"get_gnomad_filenames(population::String)\n\nReturns a list of file names that would be downloaded for the specified population. This function will not download anything. If join=true, the full path will be returned\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.get_ukb_filenames","page":"API","title":"EasyLD.get_ukb_filenames","text":"get_ukb_filenames(population::String)\n\nReturns a list of file names that would be downloaded for the specified population. This function will not download anything. If join=true, the full path will be returned\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.hail_block_matrix","page":"API","title":"EasyLD.hail_block_matrix","text":"hail_block_matrix(bm_files::String, ht_files::String)\n\nCreates a HailBlockMatrix which allows reading chunks of LD matrix data into  memory. It is a subtype of AbstractMatrix, so operations like indexing and  size() works, but only accessing its elements in contiguous chunks is \"fast\".  I may support more functionalities depending on interest. \n\nExamples\n\nusing EasyLD\ndatadir = \"/Users/biona001/.julia/dev/EasyLD/data\"\nbm_file = joinpath(datadir, \"UKBB.EUR.ldadj.bm\")\nht_file = joinpath(datadir, \"UKBB.EUR.ldadj.variant.ht\")\nbm = hail_block_matrix(bm_file, ht_file); # need a ';' to avoid displaying a few entries of bm, which takes ~0.1 seconds per entry\n\n# get matrix dimension\nsize(bm) # returns (23960350, 23960350)\n\n# read a single entry\nbm[1, 1] # returns 0.999959841549239\n\n# read first 10k by 10k block into memory (takes roughly 7 seconds)\nbm[1:10000, 1:10000]\n\n# arbitrary slicing works but is very slow\nbm[1:3, 1:2:100] # ~22 seconds\n\n# read a specific chromosome region\nchr = 1\nstart_pos = 11063\nend_pos = 91588\nsigma = get_block(bm, chr, start_pos, end_pos)\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.read_variant_index_tables","page":"API","title":"EasyLD.read_variant_index_tables","text":"read_variant_index_tables(ht_file::String)\n\nRead variant index hail tables into a DataFrame. The first time this function gets called, we will read the original .ht files into memory and write the result to a tab-separated value .tsv file into the same directory as ht_file,  and we will also create a comma separated file ending in .csv which pre-process the .tsv file for easier reading. \n\nNote\n\nrsIDs: Some panels (e.g. Pan-UKB) also contain rsID, but others (e.g. gnomAD) does not,   so rsID may not be available. \nAF: Alternate Allele frequency is sometimes available in the .tsv file in   its own column (e.g. Pan-UKB), but other times it's hidden inside a column    of the .tsv file (e.g. in gnomAD it is under the header pop_freq which   includes AF but also other information). In the later case, we will assume   the column in .tsv has header name alt_allele_header and is JSON   formatted, and further that alt-allele freq is available as AF key. See   _extract_alternate_allele_freq\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD.get_block","page":"API","title":"EasyLD.get_block","text":"get_block(bm::HailBlockMatrix, chr, start_bp, end_bp; [min_maf], [snps_to_keep])\n\nReads in a block of LD matrix from chromosome chr between basepairs  start_bp and end_bp. The inputs chr, start_bp, end_bp can be Int or String. The result will always be a matrix even if start_bp == end_bp. If  start_bp or end_bp is not in the LD matrix, we will return the smallest region that does NOT include them. For example, if  (start_bp, end_bp) = (555, 777) and SNP positions in the LD panel are  positions = [..., 400,  500,  600,  700,  800,  900, ...] with snp_names = [..., snp4, snp5, snp6, snp7, snp8, snp9, ..],  then we will return the LD matrix for [snp6, snp7]\n\nInputs\n\nbm: A HailBlockMatrix\nchr: Chromosome number, can be an Int or String (e.g. 1 or \"1\")\nstart_bp: Starting basepair, can be an Int or String\nend_bp: Ending basepair, can be an Int or String\n\nOptional inputs\n\nmin_maf: Minimum minor allele frequency. Only variants with alternate allele   frequency between [min_maf, 1-min_maf] is kept. Default min_maf=0.01\nsnps_to_keep: Vector of SNP positions to import. If both snps_to_keep and   min_maf are specified, only SNPs whose position is listed in snps_to_keep   whose minor allele frequency exceeds min_maf will be kept. \nmin_eigval: Smallest eigenvalue allowed in Σ. All eigenvalues smaller than    min_eigval will be set to min_eigval (default 1e-5). This option is only   used if enforce_psd=true.\nenforce_psd: LD data stored in Pan-UKB or gnomAD LD panels only includes the   upper triangular portion. If enforce_psd is true, we will copy the upper    triangular portion to the lower triangular portion, force eigenvalues to be   above min_eigval, and then scale the covariance matrix into a correlation   matrix (default true)\n\nNote\n\nMake sure start_bp and end_bp is from the same human genome build as the  LD matrices. One can verify build information via bm.build. Both Pan-UKBB and  gnomAD uses hg19 (i.e. GRCh37).\n\n\n\n\n\n","category":"function"},{"location":"man/api/#Internal-helper-functions-and-structs","page":"API","title":"Internal helper functions and structs","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"  EasyLD.HailBlockMatrix\n  EasyLD._extract_alternate_allele_freq\n  EasyLD._extract_ref_alt_alleles\n  EasyLD._extract_genome_build\n  EasyLD._read_metadata","category":"page"},{"location":"man/api/#EasyLD.HailBlockMatrix","page":"API","title":"EasyLD.HailBlockMatrix","text":"Currently a HailBlockMatrix is just a python wrapper, where data reading is  achieved within python by the Hail software, then the result is passed into Julia via PyCall.jl. The bm field behaves as a BlockMatrix from hail. The info fields stores the chr/pos/ref/alt/AF information, where pos uses coordinates in genome build build.\n\nThe Hail Block Matrix format is described here https://hail.is/docs/0.2/linalg/hail.linalg.BlockMatrix.html#blockmatrix\n\nA more specific file description is provided here https://discuss.hail.is/t/blockmatrix-specification/3118\n\n\n\n\n\n","category":"type"},{"location":"man/api/#EasyLD._extract_alternate_allele_freq","page":"API","title":"EasyLD._extract_alternate_allele_freq","text":"_extract_alternate_allele_freq(df::DataFrame; header_name = \"pop_freq\")\n\nInternal helper function that extracts alternate allele frequency from the  ht_file assuming this information is present in the variant index files  as JSON format with header header_name. Only gnomAD panel will actually reach here since Pan-UKB has AF as a separate field in its variant index files\n\nFor example, in gnomAD, we have\n\njulia> tsv_file = \"gnomad.genomes.r2.1.1.nfe.common.adj.ld.variant_indices.ht/variant.ht.tsv\"\njulia> df = CSV.read(tsv_file, DataFrame)\njulia> names(df)\n4-element Vector{String}:\n \"locus\"\n \"alleles\"\n \"pop_freq\"\n \"idx\"\njulia> df[1, \"pop_freq\"] # first entry with header `pop_freq` that contains AF\n\"{\"AC\":861,\"AF\":0.40922053231939165,\"AN\":2104,\"homozygote_count\":166}\"\n\nThen the AF field for all variants will be extracted\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD._extract_ref_alt_alleles","page":"API","title":"EasyLD._extract_ref_alt_alleles","text":"_extract_ref_alt_alleles(alleles::Vector{String})\n\nInternal helper function to extract the ref/alt alleles from hail tables. Each  element of alleles should be a string that has 2 alleles wrapped in quotations, as in the case for Pan-UKB and gnomAD. The first is assumed to be reference and  the second is alt. As an example, [\"CCTAA\",\"C\"] with give ref = \"CCTAA\" and  alt = \"C\". \n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD._extract_genome_build","page":"API","title":"EasyLD._extract_genome_build","text":"_extract_genome_build(ht_file::String)\n\nInternal helper function to extracts the human genome build information from  the variant index folder. We assume this information is stored in a file called  metadata.json or metadata.json.gz in the following format Locus(XXX) where XXX is the reference build. If this format is not detected, the genome build information will be \"Unknown\"\n\n\n\n\n\n","category":"function"},{"location":"man/api/#EasyLD._read_metadata","page":"API","title":"EasyLD._read_metadata","text":"_read_metadata(metafile::String)\n\nInternal helpder function that reads the metadata file and returns a dictionary. metafile should end with .json or .json.gz\n\n\n\n\n\n","category":"function"}]
}
